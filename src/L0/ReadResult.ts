// Imports ========================================================================================

import IBFSError, { IBFSErrorCode, IBFSErrorMetadata }  from "@errors"
import { CommonReadMeta, LinkBlock, StorageBlock }      from "@L0/Serialize.js"

// Types ==========================================================================================

export interface DSSuccess<Meta extends LinkBlock | StorageBlock> {
    readonly meta:          Meta & CommonReadMeta
    readonly crc:           number
    readonly crcMismatch:   boolean
    readonly error:         null
}

export interface DSFailure<ErrorCode extends IBFSErrorCode> {
    readonly meta:          null
    readonly crc:           null
    readonly crcMismatch:   null
    readonly error:         IBFSError<ErrorCode>
}

export type DSResult<Meta extends LinkBlock|StorageBlock, ErrorCode extends IBFSErrorCode> = 
    | DSSuccess<Meta>
    | DSFailure<ErrorCode>

// Module =========================================================================================

/**
 * Represents deserialization results of either a link or storage block.
 */
export default class ReadResult<Meta extends LinkBlock|StorageBlock, ErrorCode extends IBFSErrorCode> {

    /** Block metadata (includes deserialized block data) */
    public readonly meta: null | Meta & CommonReadMeta
    /** Deserialization error (if thrown) */
    public readonly error: null | IBFSError<ErrorCode>
    /** CRC value computed while deserializing block data. */
    public readonly crc: null | number
    /** Indicates whether a CRC mismatch ocurred. Generated by comparing live CRC with the one saved in block metadata. */
    public readonly crcMismatch: null | boolean

    private constructor(meta: Meta & CommonReadMeta | null, crc: number | null, error?: IBFSError<ErrorCode> | null) {
        this.meta        = meta
        this.error       = error || null
        this.crc         = crc
        this.crcMismatch = meta?.crc32Sum !== crc
    }

    // Factory method with explicit return type
    static success<Meta extends LinkBlock | StorageBlock>(meta: Meta & CommonReadMeta, crc: number): DSSuccess<Meta> {
        return new this(meta, crc, null) as DSSuccess<Meta>
    }

    static failure<ErrorCode extends IBFSErrorCode>(code: IBFSErrorCode, message?: string|null, cause?: Error | null, meta?: IBFSErrorMetadata): DSFailure<ErrorCode> {
        const ibfsError = new IBFSError(code, message, cause, meta)
        return new this(null, null, ibfsError) as DSFailure<ErrorCode>
    }

}
